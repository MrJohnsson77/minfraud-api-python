
#
# def define_class(typename, **fields):
#     keys = sorted(fields.keys())
#     T = collections.namedtuple(typename, keys)
#     T.__new__.__defaults__ = tuple([fields[x] for x in keys])
#     return T

#
# def define_complex(cls, values, to_inflate):
#     base = define_class(cls, **values)
#
#     def new(cls, **kwargs):
#         for field in to_inflate:
#             kwargs[field] = to_inflate[field](kwargs.get(field, {}))
#         return base.__new__(cls, **kwargs)
#
#     return type(cls, (base, ), {'__new__': new})

class _InflateToNamedtuple(object):
    def __init__(self, cls):
        self.cls = cls
        self.keys = sorted(cls.fields.keys())
        self.nt = namedtuple(cls.__name__, self.keys)

    def __call__(self, *args, **kwargs):
        if (args and kwargs) or len(args) > 1:
            raise ValueError('Only provide a single (dict) positional argument'
                             ' or use keyword arguments. Do not use both.')
        print(kwargs)
        if args:
            values = args[0] if args[0] else {}

            for field, default in self.cls.fields.items():
                if callable(default):
                    kwargs[field] = default(values.get(field))
                else:
                    kwargs[field] = values.get(field, default)
        print(kwargs)
        return self.nt._make(kwargs)
